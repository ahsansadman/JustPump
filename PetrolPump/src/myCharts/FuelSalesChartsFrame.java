/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myCharts;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.plaf.ButtonUI;
import javax.swing.plaf.basic.BasicButtonUI;
import mainpkg.CarWashInternalFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Sadman's Den
 */
public class FuelSalesChartsFrame extends javax.swing.JFrame {

    /**
     * Creates new form FuelSalesChartsFrame
     */
    public FuelSalesChartsFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        generatePieChart();
        generateBarChart();
        generateLineChart();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pieChartPanel = new javax.swing.JPanel();
        barChartPanel = new javax.swing.JPanel();
        lineChartPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(44, 62, 80));

        pieChartPanel.setLayout(new java.awt.BorderLayout());

        barChartPanel.setLayout(new java.awt.BorderLayout());

        lineChartPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(pieChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(barChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(lineChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lineChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     void generatePieChart(){
         float pSale = 0, oSale = 0, dSale = 0, kSale = 0; 
        ArrayList<String> list = new ArrayList();
         
         Scanner s = null;
        try {
            s = new Scanner(new File("FuelSalesList.txt"));
        } catch (FileNotFoundException ex) { 
            Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (s.hasNextLine()){
                list.add(s.nextLine());
        }
        s.close();
        for(String ss : list){
            String[] str = ss.split(",");
            if(str[1].equals("Petrol")) pSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Octane")) oSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Diesel")) dSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Kerosene")) kSale+= Float.parseFloat(str[2]);
        }
   
        DefaultPieDataset piedataset = new DefaultPieDataset();  
        piedataset.setValue("Petrol", pSale) ;  
        piedataset.setValue("Octane", oSale); 
        piedataset.setValue("Diesel", dSale);  
        piedataset.setValue("Kerosene", kSale);    
       
        JFreeChart piechart = ChartFactory.createPieChart(  
            "Pie Chart",   // Title  
            piedataset,  //dataset           
            true,    //legends              
            true,    //tools               
            true    //urls                
        );  
       
        piechart.getTitle().setPaint(Color.RED); // Set the colour of the title  
        piechart.setBackgroundPaint(Color.BLACK);
      
        PiePlot p=(PiePlot)piechart.getPlot();
        p.setBackgroundPaint(Color.WHITE);        
      
        ChartPanel cPanel= new ChartPanel(piechart);
        pieChartPanel.removeAll();
        pieChartPanel.add(cPanel,BorderLayout.CENTER);
        //pieChartPanel.add(new JButton("C"),BorderLayout.CENTER);
        //pieChartPanel.add(new JButton("N"),BorderLayout.NORTH);
        //pieChartPanel.add(new JButton("S"),BorderLayout.SOUTH);
        //pieChartPanel.add(new JButton("E"),BorderLayout.EAST);
        //pieChartPanel.add(new JButton("W"),BorderLayout.WEST);
        pieChartPanel.validate();
        File imageFile = new File("fuelSalesPieChart.jpg");
        int width = 330;
        int height = 330;
        try {
        ChartUtilities.saveChartAsJPEG(imageFile, piechart, width, height);
        } catch (IOException ex) {
        System.err.println(ex);}
    }// end of pieChart();
    
    void generateBarChart(){
        float pSale = 0, oSale = 0, dSale = 0, kSale = 0; 
        ArrayList<String> list = new ArrayList(); 
        Scanner s = null;
        try {
            s = new Scanner(new File("FuelSalesList.txt"));
        } catch (FileNotFoundException ex) { 
            Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (s.hasNextLine()){
                list.add(s.nextLine());
        }
        s.close();
        
        for(String ss : list){
            String[] str = ss.split(",");
            if(str[1].equals("Petrol")) pSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Octane")) oSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Diesel")) dSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Kerosene")) kSale+= Float.parseFloat(str[2]);
        }
        
        DefaultCategoryDataset bardataset = new DefaultCategoryDataset();  
        //for(int j=0;j<c;j++){
        bardataset.setValue(pSale,Float.toString(pSale) ,"Petrol" );
        bardataset.setValue(oSale,Float.toString(oSale) ,"Octance" );
        bardataset.setValue(dSale,Float.toString(dSale) ,"Diesel" );
        bardataset.setValue(kSale,Float.toString(kSale) ,"Kerosene" );

       
        JFreeChart barchart = ChartFactory.createBarChart3D(  
            "Bar Chart",  //Title      
            "Fuel Type",  // X axis 
            "Sale(tk)",  //y
            bardataset,             
            PlotOrientation.VERTICAL,      
            true,                
            true,                
            false               
        ); 
        
        barchart.getTitle().setPaint(Color.black);  
        barchart.setBackgroundPaint(Color.WHITE);
     
        // Set the background colour of the chart  
        CategoryPlot cp = barchart.getCategoryPlot(); 
     
        cp.setBackgroundPaint(Color.white);       
        cp.setRangeGridlinePaint(Color.blue);// Set the colour of the plot gridlines  

        ChartPanel cPanel= new ChartPanel(barchart); 

        //BarRenderer r = (BarRenderer)barchart.getCategoryPlot().getRenderer();
        //r.setSeriesPaint(0, Color.PINK);
          
        barChartPanel.add(cPanel,BorderLayout.CENTER);
        
        File imageFile = new File("fuelSalesBarChart.jpg");
        int width = 330;
        int height = 330;
        try {
        ChartUtilities.saveChartAsJPEG(imageFile, barchart, width, height);
        } catch (IOException ex) {
        System.err.println(ex);}
        
    }//end of barChart();
    
      void generateLineChart(){
        float pSale = 0, oSale = 0, dSale = 0, kSale = 0; 
        ArrayList<String> list = new ArrayList(); 
        Scanner s = null;
        try {
            s = new Scanner(new File("FuelSalesList.txt"));
        } catch (FileNotFoundException ex) { 
            Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (s.hasNextLine()){
                list.add(s.nextLine());
        }
        s.close();
        
        for(String ss : list){
            String[] str = ss.split(",");
            if(str[1].equals("Petrol")) pSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Octane")) oSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Diesel")) dSale+= Float.parseFloat(str[2]);
            if(str[1].equals("Kerosene")) kSale+= Float.parseFloat(str[2]);
        }
       
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();  
        dataset.setValue(pSale,Float.toString(pSale) ,"Petrol" );
        dataset.setValue(oSale,Float.toString(pSale) ,"Octane" );
        dataset.setValue(dSale,Float.toString(pSale) ,"Diesel" );
        dataset.setValue(kSale,Float.toString(pSale) ,"Kerosene" );

        JFreeChart lineChart = ChartFactory.createLineChart(  
            "Line Chart",  // Title  
            "Fuel Type",             // X-axis Label  
            "Sale(tk)",             //y 
            dataset,             
            PlotOrientation.VERTICAL,        
            false,                 
            true,                
            false                    
        ); 
        lineChart.getTitle().setPaint(Color.black);     
        lineChart.setBackgroundPaint(Color.WHITE);
    
        CategoryPlot cp = lineChart.getCategoryPlot(); 
        cp.setBackgroundPaint(Color.white);       
        cp.setRangeGridlinePaint(Color.blue);      
        ChartPanel cPanel= new ChartPanel(lineChart); 

        lineChartPanel.add(cPanel,BorderLayout.CENTER);
        File imageFile = new File("fuelSalesLineChart.jpg");
        int width = 330;
        int height = 330;
        try {
        ChartUtilities.saveChartAsJPEG(imageFile, lineChart, width, height);
        } catch (IOException ex) {
        System.err.println(ex);}
        
    }//end of lineChart();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FuelSalesChartsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FuelSalesChartsFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barChartPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel lineChartPanel;
    private javax.swing.JPanel pieChartPanel;
    // End of variables declaration//GEN-END:variables
}
